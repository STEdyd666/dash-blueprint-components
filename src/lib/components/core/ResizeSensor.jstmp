import React from 'react';
import PropTypes from 'prop-types';
import { ResizeSensor as BPResizeSensor } from "@blueprintjs/core";
import { Button } from '@blueprintjs/core';


// This component must be converted for using async

const ResizeSensor = props => {

    const {
        children,
        size,
        setProps,
        ...others
    } = props;

    const handleSize = (currentSize) => {
        console.log('eccomi')
        setProps({
            size: currentSize
        })
    }

    return (
        <BPResizeSensor onResize={handleSize} {...others}>
            {children}
        </BPResizeSensor>
    )
}

ResizeSensor.propTypes = {
    /**
     * The ID used to identify this component in Dash callbacks.
     */
    id: PropTypes.string,
    
    /**
    * Contents to observe for size changes.
    */
    children: PropTypes.node,

    /**
    * If true, all parent DOM elements of the container will also be observed for 
    * size changes. The array of entries passed to onResize will now contain an entry 
    * for each parent element up to the root of the document. 
    * Only enable this prop if a parent element resizes in a way that does not also 
    * cause the child element to resize.
    */
    observeParents: PropTypes.bool,
    
    /**
    * Callback invoked when the wrapped element resizes. 
    * The entries array contains an entry for each observed element. In the default case 
    * (no observeParents), the array will contain only one element: the single child of 
    * the ResizeSensor. Note that this method is called asynchronously after a resize is 
    * detected and typically it will be called no more than once per frame.
    * */
    size: PropTypes.object,
    
    setProps: PropTypes.func
};

export default ResizeSensor;