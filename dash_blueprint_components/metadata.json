{
  "src/lib/components/core/AnchorButton.js": {
    "description": "Buttons trigger actions when clicked. Button and AnchorButton components generate different HTML tags.",
    "displayName": "AnchorButton",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the button will display in an active state. \nThis is equivalent to setting className={Classes.ACTIVE}."
      },
      "alignText": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text \nwill be centered within the button. Passing \"left\" or \"right\" \nwill align the button text to that side and push icon and \nrightIcon to either edge. Passing \"center\" will center the \ntext and icons together."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Button contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this action is non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should expand to fill its container."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render \nbefore the text."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use large styles."
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the button will display a centered loading \nspinner instead of its contents and the button will be \ndisabled (even if disabled={false}). The width of the button \nis not affected by the value of this prop."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use minimal styles."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link URL."
      },
      "outlined": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Whether this button should use outlined styles."
      },
      "rightIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render after the text."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use small styles."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "text": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Action text. Can be any single React renderable."
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'submit'",
              "computed": false
            },
            {
              "value": "'reset'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "HTML type attribute of button. Accepted values are \"button\", \n\"submit\", and \"reset\". Note that this prop has no effect \non AnchorButton; it only affects Button",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Breadcrumb.js": {
    "description": "Breadcrumbs identify the path to the current resource in an application.",
    "displayName": "Breadcrumb",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alwaysRenderOverflow": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to display all the collapsed items or just the last one"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "collapseFrom": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Which direction the breadcrumbs should collapse from: start or end."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "All breadcrumbs to display. Breadcrumbs that do not fit \nin the container will be rendered in an overflow menu instead.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "minVisibleItems": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum number of visible breadcrumbs that should never \ncollapse into the overflow menu, regardless of DOM dimensions."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Button.js": {
    "description": "Buttons trigger actions when clicked. Button and AnchorButton components generate different HTML tags.",
    "displayName": "Button",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the button will display in an active state. \nThis is equivalent to setting className={Classes.ACTIVE}."
      },
      "alignText": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text \nwill be centered within the button. Passing \"left\" or \"right\" \nwill align the button text to that side and push icon and \nrightIcon to either edge. Passing \"center\" will center the \ntext and icons together."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Button contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this action is non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should expand to fill its container."
      },
      "icon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render \nbefore the text."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use large styles."
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the button will display a centered loading \nspinner instead of its contents and the button will be \ndisabled (even if disabled={false}). The width of the button \nis not affected by the value of this prop."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use minimal styles."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link URL."
      },
      "outlined": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use outlined styles."
      },
      "rightIcon": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render after the text."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use small styles."
      },
      "text": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Action text. Can be any single React renderable."
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'submit'",
              "computed": false
            },
            {
              "value": "'reset'",
              "computed": false
            },
            {
              "value": "'button'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "HTML type attribute of button. Accepted values are \"button\", \n\"submit\", and \"reset\". Note that this prop has no effect \non AnchorButton; it only affects Button.",
        "defaultValue": {
          "value": "'button'",
          "computed": false
        }
      },
      "target": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Target."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the button."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/ButtonGroup.js": {
    "description": "Button groups arrange multiple buttons in a horizontal or vertical group.",
    "displayName": "ButtonGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alignText": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            },
            {
              "value": "'center'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Text alignment within button. By default, icons and text \nwill be centered within the button. Passing \"left\" or \"right\" \nwill align the button text to that side and push icon and \nrightIcon to either edge. Passing \"center\" will center the \ntext and icons together."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Buttons in this group."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should take up the full width of its container."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use large styles."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this button should use minimal styles."
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the button group should appear with vertical styling."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Callout.js": {
    "description": "Callouts visually highlight important content for the user. They can contain a title, an icon and content. \nEach intent has a default icon associated with it.",
    "displayName": "Callout",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Buttons in this group."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render on the left side. \nIf this prop is omitted or undefined, the intent prop will determine \na default icon. If this prop is explicitly null, no icon will be displayed \n(regardless of intent)."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to background, title, and icon. Defining this \nprop also applies a default icon, if the icon prop is omitted."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "String content of optional title element. Due to a conflict with the HTML prop \ntypes, to provide JSX content simply pass <H4>JSX title content</H4> as first \nchildren element instead of using this prop (note uppercase tag name to use \nthe Blueprint Heading component)."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Card.js": {
    "description": "A card is a bounded unit of UI content with a solid background color.",
    "displayName": "Card",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "card content"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this component should use compact styles with reduced visual padding."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the intensity of the drop shadow beneath the card: the higher \nthe elevation, the higher the drop shadow. At elevation 0, no drop \nshadow is applied.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the card should respond to user interactions. If set to true, \nhovering over the card will increase the card's elevation and change \nthe mouse cursor to a pointer."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the card."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/CardList.js": {
    "description": "CardList is a lightweight wrapper around the Card component. It can be \nused to visually group together cards in a list without any excess visual \nweight around or between them.",
    "displayName": "CardList",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "bordered": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this container element should have a visual border. Set this to false to remove \nelevation and border radius styles, which allows this element to be a child of another \nbordered container element without padding (like SectionCard). Note that this also sets a \n1px margin in dark theme to account for inset box shadows in that theme used across the \ndesign system. Be sure to test your UI in both light and dark theme if you modify this prop value."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "list of cards"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this component should use compact styles with reduced visual padding. Note that this prop \naffects styling for all Cards within this CardList and you do not need to set the compact prop \nindividually on those child Cards."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Collapse.js": {
    "description": "The Collapse element shows and hides content with a built-in slide in/out animation. \nYou might use this to create a panel of settings for your application, with sub-sections \nthat can be expanded and collapsed.",
    "displayName": "Collapse",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Contents to collapse."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "component": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "Component to render as the root element. Useful when rendering a \nCollapse inside a <table>, for instance."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component is open or closed."
      },
      "keepChildrenMounted": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the child components will remain mounted when the Collapse is \nclosed. Setting to true may improve performance by avoiding re-mounting \nchildren."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The length of time the transition takes, in milliseconds. This must \nmatch the duration of the animation in CSS. Only set this prop if you \noverride Blueprint's default transitions with new transitions of a \ndifferent length."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/CompoundTag.js": {
    "description": "Compound Tag is a variant of Tag which renders textual information in a pair (sometimes referred to as a \"key-value pair\"). \nThe content on the left and right is visually segmented to signify the pairwise relationship. Just like Tag, this component \nsupports a range of visual modifiers for many different situations and its colors are designed to be accessible in almost any context.",
    "displayName": "CompoundTag",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should appear in an active state."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of the Tag"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should take up the full width of its container."
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render before the children."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should visually respond to user interactions. If set to true, \nhovering over the tag will change its color and mouse cursor."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should use large styles."
      },
      "leftContent": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "Content to be rendered on the left side of the tag (e.g. the \"key\" in a key-value pair). \nThis prop must be defined; if you have no content to show here, then use a <Tag> instead."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should use minimal styles."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently. Recommended when interactive is true."
      },
      "n_clicks_remove": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which the remove button has been clicked. This can be used to tell\nwhich button was changed most recently."
      },
      "removable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wheter the tag should have a button to handle the removal of the tag. To be used with\nn_clicks_remove",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rightIcon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render after the children."
      },
      "round": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should have rounded ends."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Divider.js": {
    "description": "Divider visually separate contents with a thin line and margin on all sides. Dividers work best \nin flex layouts where they will adapt to orientation without additional styles. Otherwise, a \ndivider will appear as a full-width 1px-high block element.",
    "displayName": "Divider",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagName": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "HTML tag to use for element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/EditableText.js": {
    "description": "EditableText appears as normal UI text but transforms into a text input field when the user focuses it.",
    "displayName": "EditableText",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alwaysRenderInput": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "EXPERIMENTAL FEATURE. \nWhen true, this forces the component to \nalways render an editable input (or textarea) both when the \ncomponent is focussed and unfocussed, instead of the component's \ndefault behavior of switching between a text span and a text \ninput upon interaction.\nThis behavior can help in certain applications where, for example, \na custom right-click context menu is used to supply clipboard \ncopy and paste functionality."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "confirmOnEnterKey": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and in multiline mode, the enter key will trigger onConfirm \nand mod+enter will insert a newline. If false, the key bindings are \ninverted such that enter adds a newline."
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default text value of uncontrolled input."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the text can be edited."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "maxLength": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum number of characters allowed. Unlimited by default."
      },
      "maxLines": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum number of lines before scrolling begins, when multiline."
      },
      "minLines": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum number of lines (essentially minimum height), when multiline."
      },
      "minWidth": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum width in pixels of the input, when not multiline."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component supports multiple lines of text. \nThis prop should not be changed during the component's lifetime."
      },
      "lastOnCancel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Callback invoked when user cancels input with the esc key. \nReceives last confirmed value."
      },
      "n_changes": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Callback invoked when user changes input in any way.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_confirms": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Callback invoked when user confirms value with enter key or by blurring input.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_edits": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Callback invoked after the user enters edit mode.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text when there is no value."
      },
      "selectAllOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the entire text field should be selected on focus. If false, \nthe cursor is placed at the end of the text. This prop is ignored on \ninputs with type other then text, search, url, tel and password. \nSee https://html.spec.whatwg.org/multipage/input.html#do-not-apply for details."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The type of input that should be shown, when not multiline."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text value of controlled input."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/EntityTitle.js": {
    "description": "EntityTitle is a component that handles rendering a common UI pattern consisting of title, icon, subtitle and tag.",
    "displayName": "EntityTitle",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "ellipsize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overflowing text content should be ellipsized."
      },
      "heading": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'Text'",
              "computed": false
            },
            {
              "value": "'H1'",
              "computed": false
            },
            {
              "value": "'H2'",
              "computed": false
            },
            {
              "value": "'H3'",
              "computed": false
            },
            {
              "value": "'H4'",
              "computed": false
            },
            {
              "value": "'H5'",
              "computed": false
            },
            {
              "value": "'H6'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "React component to render the main title heading. This defaults to \nBlueprint's <Text> component, * which inherits font size from its containing element(s)",
        "defaultValue": {
          "value": "'Text'",
          "computed": false
        }
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render in the section's header. \nNote that the header will only be rendered if title is provided."
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to render as loading state."
      },
      "subtitle": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content to render below the title. Defaults to render muted text."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tags": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "tags to be added on the right of the element"
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": true,
        "description": "The primary title to render."
      },
      "titleURL": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "If specified, the title will be wrapped in an anchor with this URL."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Icon.js": {
    "description": "Use the <Icon> component to easily render SVG icons in React",
    "displayName": "Icon",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Buttons in this group."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "color": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Color of icon. This is used as the fill attribute on the <svg> image so \nit will override any CSS color property, including that set by intent. \nIf this prop is omitted, icon color is inherited from surrounding text."
      },
      "htmlTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "String for the title attribute on the rendered element, which will appear \non hover as a native browser tooltip."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": true,
        "description": "Name of a Blueprint UI icon (or an icon element) to render on the left side. \nIf this prop is omitted or undefined, the intent prop will determine \na default icon. If this prop is explicitly null, no icon will be displayed \n(regardless of intent)."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to background, title, and icon. Defining this \nprop also applies a default icon, if the icon prop is omitted."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Size of the icon, in pixels. Blueprint contains 16px and 20px SVG icon images, \nand chooses the appropriate resolution based on this prop."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagName": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "HTML tag to use for the rendered element."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Description string. This string does not appear in normal browsers, but it \nincreases accessibility. For instance, screen readers will use it for aural \nfeedback. If this value is nullish, false, or an empty string, the component \nwill assume that the icon is decorative and aria-hidden=\"true\" will be applied.\nSee: https://www.w3.org/WAI/tutorials/images/decorative/"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/ProgressBar.js": {
    "description": "Progress bars indicate progress towards the completion of a task or an indeterminate loading state.",
    "displayName": "ProgressBar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the background should animate."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "stripes": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the background should be striped."
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A value between 0 and 1 (inclusive) representing how far along the \noperation is. Values below 0 or above 1 will be interpreted as 0 or 1, \nrespectively. Omitting this prop will result in an \"indeterminate\" \nprogress meter that fills the entire bar."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Section.js": {
    "description": "The Section component can be used to contain, structure, and create hierarchy for information in your UI.",
    "displayName": "Section",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Section Cards"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "collapsible": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this section's contents should be collapsible."
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this section should use compact styles."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Visual elevation of this container element."
      },
      "defaultIsOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When collapsible, whether the default should be open."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render in the \nsection's header. Note that the header will only be rendered if title is provided."
      },
      "rightElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element to render on the right side of the section header. Note that the header will \nonly be rendered if title is provided."
      },
      "subtitle": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "Sub-title of the section. Note that the header will only be rendered if title is provided."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "title": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "node"
            }
          ]
        },
        "required": false,
        "description": "Title of the section. Note that the header will only be rendered if title is provided."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/SectionCard.js": {
    "description": "Multiple SectionCard child components can be added under one Section, they will be stacked vertically. \nThis layout can be used to further group information.",
    "displayName": "SectionCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of the Card"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "padded": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to apply visual padding inside the content container element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Spinner.js": {
    "description": "Spinners indicate progress in a circular fashion. They're great for ongoing operations and \ncan also represent known progress.",
    "displayName": "Spinner",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "size": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Width and height of the spinner in pixels. The size cannot be less than 10px."
      },
      "tagName": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "HTML tag for the two wrapper elements. If rendering a <Spinner> inside an <svg>, \nchange this to an SVG element like \"g\"."
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A value between 0 and 1 (inclusive) representing how far along the operation is. \nValues below 0 or above 1 will be interpreted as 0 or 1 respectively. Omitting \nthis prop will result in an \"indeterminate\" spinner where the head spins indefinitely."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Tag.js": {
    "description": "Tags are great for lists of strings.",
    "displayName": "Tag",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should appear in an active state."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of the Tag"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should take up the full width of its container."
      },
      "htmlTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML title to be passed to the component"
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render before the children."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "interactive": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tag should visually respond to user interactions. If set to true, \nhovering over the tag will change its color and mouse cursor."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should use large styles."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should use minimal styles."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether tag content should be allowed to occupy multiple lines. If false, a \nsingle line of text will be truncated with an ellipsis if it overflows. \nNote that icons will be vertically centered relative to multiline text."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently. Recommended when interactive is true."
      },
      "n_clicks_remove": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which the remove button has been clicked. This can be used to tell\nwhich button was changed most recently."
      },
      "removable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Wheter the tag should have a button to handle the removal of the tag. To be used with\nn_clicks_remove",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "rightIcon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render after the children."
      },
      "round": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this tag should have rounded ends."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Text.js": {
    "description": "The Text component adds accessible overflow behavior to a line of text by conditionally \nadding the title attribute and truncating with an ellipsis when content overflows its container.",
    "displayName": "Text",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of Text."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "ellipsize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Indicates that this component should be truncated with an ellipsis if it \noverflows its container. The title attribute will also be added when content \noverflows to show the full text of the children on hover."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagName": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "HTML tag name to use for rendered element."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML title of the element"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/Tree.js": {
    "description": "Trees display hierarchical data.",
    "displayName": "Tree",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "contents": {
        "type": {
          "name": "array"
        },
        "required": true,
        "description": "The data specifying the contents and appearance of the tree."
      },
      "clicked_node": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of numbers representing a node's position in the tree when clicked"
      },
      "collapsed_node": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of numbers representing a node's position in the tree when collapsed"
      },
      "expanded_node": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of numbers representing a node's position in the tree when expanded"
      },
      "current_contents": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Tree content updated after user interaction"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/control-card/CheckboxCard.js": {
    "description": "Card with an embedded Checkbox control (left-aligned by default).",
    "displayName": "CheckboxCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alignIndicator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alignment of the indicator within container."
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is checked."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label for the control as react node element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this component should use compact styles with reduced visual padding."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is non-interactive."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the intensity of the drop shadow beneath the card: the higher \nthe elevation, the higher the drop shadow. At elevation 0, no drop \nshadow is applied.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text label for the control."
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this card should appear selected."
      },
      "showAsSelectedWhenChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should use \"selected\" Card styling when checked."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the card."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/control-card/RadioCard.js": {
    "description": "Card with an embedded Radio control (left-aligned by default).",
    "displayName": "RadioCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alignIndicator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alignment of the indicator within container."
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is checked."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label for the control as react node element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this component should use compact styles with reduced visual padding."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is non-interactive."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the intensity of the drop shadow beneath the card: the higher \nthe elevation, the higher the drop shadow. At elevation 0, no drop \nshadow is applied.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text label for the control."
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this card should appear selected."
      },
      "showAsSelectedWhenChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should use \"selected\" Card styling when checked."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "value"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the card."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/control-card/SwitchCard.js": {
    "description": "Card with an embedded Switch control (right-aligned by default).",
    "displayName": "SwitchCard",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alignIndicator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alignment of the indicator within container."
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is checked."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label for the control as react node element."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this component should use compact styles with reduced visual padding."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is non-interactive."
      },
      "elevation": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Controls the intensity of the drop shadow beneath the card: the higher \nthe elevation, the higher the drop shadow. At elevation 0, no drop \nshadow is applied.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text label for the control."
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this card should appear selected."
      },
      "showAsSelectedWhenChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should use \"selected\" Card styling when checked."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the card."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/menu/Menu.js": {
    "description": "Menus display lists of interactive items.",
    "displayName": "Menu",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Menu items."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the menu items in this menu should use a large appearance."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the menu items in this menu should use a small appearance."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the menu."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/menu/MenuDivider.js": {
    "description": "Use MenuDivider to separate menu sections. Optionally, add a title to the divider.",
    "displayName": "MenuDivider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "title": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional header title."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/menu/MenuItem.js": {
    "description": "A MenuItem is a single interactive item in a Menu.",
    "displayName": "MenuItem",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "active": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this item should appear active, often useful to \nindicate keyboard focus. Note that this is distinct from selected \nappearance, which has its own prop."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Children of this component will be rendered in a submenu that appears \nin a popover when hovering or clicking on this item.\nUse text prop for the content of the menu item itself."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this menu item is non-interactive. Enabling this prop will \nignore href, tabIndex, and mouse event handlers (in particular click, down, \nenter, leave)."
      },
      "href": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link URL."
      },
      "htmlTitle": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML title to be passed to the component"
      },
      "icon": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "elementType"
            }
          ]
        },
        "required": false,
        "description": "Name of a Blueprint UI icon (or an icon element) to render before the text."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Right-aligned label text content, useful for displaying hotkeys. This prop \nactually supports JSX elements, but TypeScript will throw an error because \nHTMLAttributes only allows strings. Use labelElement to supply a JSX element \nin TypeScript."
      },
      "labelClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the right-aligned \nlabel wrapper element."
      },
      "labelElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Right-aligned label content, useful for displaying hotkeys."
      },
      "multiline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the text should be allowed to wrap to multiple lines. If false, \ntext will be truncated with an ellipsis when it reaches max-width."
      },
      "n_clicks": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to tell\nwhich button was changed most recently.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "roleStructure": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'menuitem'",
              "computed": false
            },
            {
              "value": "'listoption'",
              "computed": false
            },
            {
              "value": "'listitem'",
              "computed": false
            },
            {
              "value": "'none'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Changes the ARIA role property structure of this MenuItem to accomodate for \nvarious different roles of the parent Menu ul element.\nIf menuitem, role structure becomes:\n<li role=\"none\" <a role=\"menuitem\"\nwhich is proper role structure for a <ul role=\"menu\" parent (this is the \ndefault role of a Menu).\nIf listoption, role structure becomes:\n<li role=\"option\" <a role=undefined\nwhich is proper role structure for a <ul role=\"listbox\" parent, or \na <select> parent."
      },
      "selected": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this item should appear selected. Defining this will set the \naria-selected attribute and apply a \"check\" or \"blank\" icon on the \nitem (unless the icon prop is set, which always takes precedence)."
      },
      "shouldDismissPopover": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether an enabled item without a submenu should automatically close \nits parent popover when clicked."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagName": {
        "type": {
          "name": "elementType"
        },
        "required": false,
        "description": "Name of the HTML tag that wraps the MenuItem."
      },
      "target": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Link target attribute. Use \"_blank\" to open in a new window."
      },
      "text": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Item text, required for usability."
      },
      "textClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the text wrapper element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/navbar/Navbar.js": {
    "description": "Navbars present useful navigation controls at the top of an application.",
    "displayName": "Navbar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of the Navbar"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "fixedToTop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this navbar should be fixed to the top of the viewport \n(using CSS position: fixed)"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/navbar/NavbarDivider.js": {
    "description": "Use to divide components of the navbar",
    "displayName": "NavbarDivider",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      }
    }
  },
  "src/lib/components/core/navbar/NavbarGroup.js": {
    "description": "Use to group components of the navbar",
    "displayName": "NavbarGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "align": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The side of the navbar on which the group should appear. The \nAlignment enum provides constants for these values."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of the NavbarGroup"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/navbar/NavbarHeading.js": {
    "description": "Heading of the navbar",
    "displayName": "NavbarHeading",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of the NavbarHeading"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/sidebar/SideBar.js": {
    "description": "Component for creating interactive Sidebars",
    "displayName": "SideBar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "items to be displayed in the menu."
      },
      "route": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "current selected route"
      },
      "initialRoute": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "initial route"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/tabs/Tab.js": {
    "description": "Tab is a minimal wrapper with no functionality of its own\u2014it is managed entirely by its parent Tabs wrapper.",
    "displayName": "Tab",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the tab is disabled."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to render before the children."
      },
      "panel": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Panel content, rendered by the parent Tabs when this tab is active. If omitted, \nno panel will be rendered for this tab."
      },
      "panelClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to tab panel container."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Content of tab title, rendered in a list above the active panel"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/core/tabs/Tabs.js": {
    "description": "Tabs is the top-level component responsible for rendering the tab list and coordinating selection.",
    "displayName": "Tabs",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "animate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the selected tab indicator should animate its movement."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Tab elements."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultSelectedTabId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial selected tab id, for uncontrolled usage. Note that this prop refers \nonly to <Tab> children; other types of elements are ignored."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to make the tabs list fill the height of its parent.\nThis has no effect when vertical={true}. This is not recommended when tab panels \nare defined within this component subtree, as the height computation will include \nthe panel height, which is usually not intended. Instead, it works well if the \npanels are rendered elsewhere in the React tree."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the tab titles will display with larger styling. This will apply \nlarge styles only to the tabs at this level, not to nested tabs."
      },
      "renderActiveTabPanelOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether inactive tab panels should be removed from the DOM and unmounted in React. \nThis can be a performance enhancement when rendering many complex panels, but requires \ncareful support for unmounting and remounting."
      },
      "selectedTabId": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected tab id, for controlled usage. Providing this prop will put the component \nin controlled mode. Unknown ids will result in empty selection (no errors)."
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show tabs stacked vertically on the left side."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/datetime/DateInput.js": {
    "description": "The DateInput component is an InputGroup that shows a DatePicker inside a Popover on focus. \nIt optionally shows a TimezoneSelect on the right side of the InputGroup, allowing the user \nto change the timezone of the selected date.",
    "displayName": "DateInput",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "canClearSelection": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day. Passed to DatePicker component."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the date picker action bar. Passed to DatePicker component."
      },
      "closeOnSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Whether the calendar popover should close when a date is selected."
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "An ISO string representing the selected time."
      },
      "dateFnsFormat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "date-fns format string used to format & parse date strings."
      },
      "defaultTimezone": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The default timezone selected. Defaults to the user local timezone"
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The default date to be used in the component when uncontrolled, represented as an ISO string."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the date input is non-interactive."
      },
      "disableTimezoneSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to disable the timezone select."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "footerElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "An additional element to show below the date picker."
      },
      "highlightCurrentDay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the current day should be highlighted in the calendar."
      },
      "initialMonth": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The initial month the calendar displays."
      },
      "invalidDateMessage": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The error message to display when the date selected is invalid."
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "date-fns Locale object or locale code string ((ISO 639-1 + optional country code) which \nwill be used to localize the date picker. If you provide a locale code string and receive \na loading error, please make sure it is included in the list of date-fns'"
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "outOfRangeMessage": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The error message to display when the date selected is out of range."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text to display in empty input fields. Recommended practice is to indicate the expected date format."
      },
      "reverseMonthAndYearMenus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the month menu will appear to the left of the year menu. Otherwise, the month menu will apear to \nthe right of the year menu."
      },
      "rightElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element to render on right side of input."
      },
      "selectedShortcutIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The currently selected shortcut. If this prop is provided, the component acts in a controlled manner."
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a date are displayed or not. If true, preset shortcuts will be displayed. If false, \nno shortcuts will be displayed."
      },
      "showActionsBar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the bottom bar displaying \"Today\" and \"Clear\" buttons should be shown."
      },
      "showTimezoneSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the timezone select dropdown on the right side of the input. If timePrecision is undefined, this will always be false."
      },
      "showTimeArrowButtons": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether arrows for selecting the time should be shown."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value\nshows a TimePicker below the calendar. Time is preserved across date changes. Either 'minute', 'second', 'millisecond'"
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar."
      },
      "useAmPm": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time should be displayed as AM/PM"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/datetime/DatePicker.js": {
    "description": "DatePicker renders a UI to choose a single date and (optionally) a time of day.",
    "displayName": "DatePicker",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "canClearSelection": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Allows the user to clear the selection by clicking the currently selected day. If disabled, the \"Clear\" \nButton in the Actions Bar will also be disabled."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "clearButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the reset button in the action bar."
      },
      "date": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The currently selected day."
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set."
      },
      "footerElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "An additional element to show below the date picker."
      },
      "highlightCurrentDay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the current day should be highlighted in the calendar."
      },
      "initialMonth": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The initial month the calendar displays."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "reverseMonthAndYearMenus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the month menu will appear to the left of the year menu. Otherwise, the month menu will apear to \nthe right of the year menu."
      },
      "selectedShortcutIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The currently selected shortcut. If this prop is provided, the component acts in a controlled manner."
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a date are displayed or not. If true, preset shortcuts will be displayed. If false, \nno shortcuts will be displayed."
      },
      "showActionsBar": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the bottom bar displaying \"Today\" and \"Clear\" buttons should be shown."
      },
      "showTimeArrowButtons": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether arrows for selecting the time should be shown."
      },
      "showOutsideDays": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show in muted format the days not belonging to the current month"
      },
      "showWeekNumber": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show week numbers"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value\nshows a TimePicker below the calendar. Time is preserved across date changes. Either 'minute', 'second', 'millisecond'"
      },
      "todayButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text for the today button in the action bar."
      },
      "useAmPm": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time should be displayed as AM/PM"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/datetime/DateRangeInput.js": {
    "description": "The DateRangeInput component is ControlGroup composed of two InputGroups. It shows a \nDateRangePicker in a Popover on focus.",
    "displayName": "DateRangeInput",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "allowSingleDayRange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the start and end dates of the range can be the same day. If true, clicking a selected date will \ncreate a one-day range. If false, clicking a selected date will clear the selection."
      },
      "closeOnSelection": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Whether the calendar popover should close when a date is selected."
      },
      "contiguousCalendarMonths": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether displayed months in the calendar are contiguous. If false, each side of the calendar can move independently \nto non-contiguous months."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "dateFnsFormat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "date-fns format string used to format & parse date strings."
      },
      "defaultValue": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the text inputs are non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "footerElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "An additional element to show below the date picker."
      },
      "highlightCurrentDay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the current day should be highlighted in the calendar."
      },
      "initialMonth": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The initial month the calendar displays."
      },
      "invalidDateMessage": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The error message to display when the date selected is invalid."
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The locale name, which is passed to the functions in localeUtils (and formatDate and parseDate if supported)."
      },
      "maxDate": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "minDate": {
        "type": {
          "name": "instanceOf",
          "value": "Date"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "outOfRangeMessage": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The error message to display when the date selected is out of range."
      },
      "overlappingDatesMessage": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The error message to display when the selected dates overlap. This can only happen when typing dates in the input field."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text to display in empty input fields. Recommended practice is to indicate the expected date format."
      },
      "range": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The currently selected range."
      },
      "reverseMonthAndYearMenus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the month menu will appear to the left of the year menu. Otherwise, the month menu will apear to \nthe right of the year menu."
      },
      "selectAllOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the entire text field should be selected on focus."
      },
      "selectedShortcutIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The currently selected shortcut."
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a date are displayed or not. If true, preset shortcuts will be displayed. If false, \nno shortcuts will be displayed."
      },
      "singleMonthOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show only a single month calendar."
      },
      "showTimeArrowButtons": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether arrows for selecting the time should be shown."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value\nshows a TimePicker below the calendar. Time is preserved across date changes. Either 'minute', 'second', 'millisecond'"
      },
      "useAmPm": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time should be displayed as AM/PM"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/datetime/DateRangePicker.js": {
    "description": "A DateRangePicker shows two sequential month calendars and allows the user to select a range of days.",
    "displayName": "DateRangePicker",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "allowSingleDayRange": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the start and end dates of the range can be the same day. If true, clicking a selected date will \ncreate a one-day range. If false, clicking a selected date will clear the selection."
      },
      "contiguousCalendarMonths": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether displayed months in the calendar are contiguous. If false, each side of the calendar can move independently \nto non-contiguous months."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultValue": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Initial day the calendar will display as selected. This should not be set if value is set."
      },
      "footerElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "An additional element to show below the date picker."
      },
      "highlightCurrentDay": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the current day should be highlighted in the calendar."
      },
      "initialMonth": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The initial month the calendar displays."
      },
      "maxDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest date the user can select."
      },
      "minDate": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest date the user can select."
      },
      "reverseMonthAndYearMenus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the month menu will appear to the left of the year menu. Otherwise, the month menu will apear to \nthe right of the year menu."
      },
      "selectedShortcutIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The currently selected shortcut. If this prop is provided, the component acts in a controlled manner."
      },
      "shortcuts": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether shortcuts to quickly select a date are displayed or not. If true, preset shortcuts will be displayed. If false, \nno shortcuts will be displayed."
      },
      "singleMonthOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show only a single month calendar."
      },
      "showTimeArrowButtons": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether arrows for selecting the time should be shown."
      },
      "showOutsideDays": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show in muted format the days not belonging to the current month"
      },
      "showWeekNumber": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show week numbers"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "timePrecision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time selection that accompanies the calendar. Passing a TimePrecision value\nshows a TimePicker below the calendar. Time is preserved across date changes. Either 'minute', 'second', 'millisecond'"
      },
      "useAmPm": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time should be displayed as AM/PM"
      },
      "range": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The currently selected range."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/datetime/TimePicker.js": {
    "description": "A TimePicker allows the user to specify a time.",
    "displayName": "TimePicker",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to focus the first input when it opens initially."
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial time the TimePicker will display. This should not be set if value is set."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the time picker is non-interactive."
      },
      "maxTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The latest time the user can select. The year, month, and day parts of the Date object are ignored. \nWhile the maxTime will be later than the minTime in the basic case, it is also allowed to be earlier \nthan the minTime. This is useful, for example, to express a time range that extends before and after midnight. \nIf the maxTime and minTime are equal, then the valid time range is constrained to only that one value."
      },
      "minTime": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The earliest time the user can select. The year, month, and day parts of the Date object are ignored. While the \nminTime will be earlier than the maxTime in the basic case, it is also allowed to be later than the maxTime. This \nis useful, for example, to express a time range that extends before and after midnight. If the maxTime and minTime \nare equal, then the valid time range is constrained to only that one value."
      },
      "precision": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The precision of time the user can set."
      },
      "selectAllOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether all the text in each input should be selected on focus."
      },
      "showArrowButtons": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show arrows buttons for changing the time."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "useAmPm": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to use a 12 hour format with an AM/PM dropdown."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The currently set time."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/datetime/TimezoneSelect.js": {
    "description": "TimezoneSelect allows the user to select from a list of timezones.",
    "displayName": "TimezoneSelect",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element which triggers the timezone select popover. If this is undefined, by default the component will \nrender a <Button> which shows the currently selected timezone."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this component is non-interactive. This prop will be ignored if children is provided."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container. This overrides popoverProps.fill and buttonProps.fill."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to show when no timezone has been selected (value === undefined). This prop will be ignored if children is provided."
      },
      "showLocalTimezone": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the local timezone at the top of the list of initial timezone suggestions."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The currently selected timezone UTC identifier, e.g. \"Pacific/Honolulu\". See: https://www.iana.org/time-zones"
      },
      "valueDisplayFormat": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Format to use when displaying the selected (or default) timezone within the target element. This prop will be ignored if children is provided.\nChoices: composite, abbreviation, long_name, code, offset"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/Checkbox.js": {
    "description": "A checkbox allows the user to toggle between checked, unchecked, and (rarely) indeterminate states.",
    "displayName": "Checkbox",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alignIndicator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alignment of the indicator within container."
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is checked."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "JSX label for the control."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is initially checked (uncontrolled mode)."
      },
      "defaultIndeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this checkbox is initially indeterminate (uncontrolled mode)."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is non-interactive."
      },
      "indeterminate": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this checkbox is indeterminate, or \"partially checked.\" The checkbox \nwill appear with a small dash instead of a tick to indicate that the value \nis not exactly true or false. Note that this prop takes precendence over \nchecked: if a checkbox is marked both checked and indeterminate via props, \nit will appear as indeterminate in the DOM."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control should appear as an inline element."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Use children or labelElement to supply JSX content. This prop actually \nsupports JSX elements, but TypeScript will throw an error because \nHTMLAttributes only allows strings."
      },
      "labelElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "JSX Element label for the control. This prop is a workaround for TypeScript \nconsumers as the type definition for label only accepts strings. \nJavaScript consumers can provide a JSX element directly to label."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this control should use large styles."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the HTML tag that wraps the checkbox. By default a <label> is used, \nwhich effectively enlarges the click target to include all of its children. \nSupply a different tag name if this behavior is undesirable or you're listening \nto click events from a parent element (as the label can register duplicate clicks)."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/ControlGroup.js": {
    "description": "A control group renders multiple distinct form controls as one unit, with a small margin between elements.",
    "displayName": "ControlGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Group contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control group should take up the full width of its container."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control group should appear with vertical styling."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/FormGroup.js": {
    "description": "Form groups support more complex form controls than simple labels, such as control \ngroups or NumericInput. They also support additional helper text to aid with user navigation.",
    "displayName": "FormGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Group contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "contentClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to the \nClasses.FORM_CONTENT element that contains children."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether form group should appear as non-interactive. Remember that input \nelements must be disabled separately."
      },
      "helperText": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Optional helper text. The given content will be wrapped in \nClasses.FORM_HELPER_TEXT and displayed beneath children. Helper text color \nis determined by the intent."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to render the label and children on a single line."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to background, title, and icon. Defining this \nprop also applies a default icon, if the icon prop is omitted."
      },
      "label": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label of this form group."
      },
      "labelFor": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "id attribute of the labelable form element that this FormGroup controls, \nused as <label for> attribute."
      },
      "labelInfo": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Optional secondary text that appears after the label"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "subLabel": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Optional text for label. The given content will be wrapped in \nClasses.FORM_GROUP_SUB_LABEL and displayed beneath label. The text color is \ndetermined by the intent."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/HTMLSelect.js": {
    "description": "Styling HTML <select> tags requires a wrapper element to customize the dropdown caret, \nso Blueprint provides a HTMLSelect component to streamline this process.",
    "displayName": "HTMLSelect",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Radio elements. This prop is mutually exclusive with options."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this element is non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this element should fill its container."
      },
      "iconName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of one of the supported icons for this component to display on the right side of the element.",
        "defaultValue": {
          "value": "\"double-caret-vertical\"",
          "computed": false
        }
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to use large styles."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to use minimal styles."
      },
      "options": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Shorthand for supplying options: an array of { label?, value } objects. If no label is supplied, \nvalue will be used as the label."
      },
      "value": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "PropTypes.number",
              "computed": true
            },
            {
              "value": "PropTypes.string",
              "computed": true
            }
          ]
        },
        "required": false,
        "description": "Controlled value of this component."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/Radio.js": {
    "description": "A radio button typically represents a single option in a mutually exclusive list",
    "displayName": "Radio",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "alignIndicator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alignment of the indicator within container."
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is checked."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "JSX label for the control."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is initially checked (uncontrolled mode)."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is non-interactive."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control should appear as an inline element."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Use children or labelElement to supply JSX content. This prop actually \nsupports JSX elements, but TypeScript will throw an error because \nHTMLAttributes only allows strings."
      },
      "labelElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "JSX Element label for the control. This prop is a workaround for TypeScript \nconsumers as the type definition for label only accepts strings. \nJavaScript consumers can provide a JSX element directly to label."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this control should use large styles."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the HTML tag that wraps the checkbox. By default a <label> is used, \nwhich effectively enlarges the click target to include all of its children. \nSupply a different tag name if this behavior is undesirable or you're listening \nto click events from a parent element (as the label can register duplicate clicks)."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Value of the radio"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/RadioGroup.js": {
    "description": "A radio button typically represents a single option in a mutually exclusive list (where only one item can be selected at a time).",
    "displayName": "RadioGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "asCard": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to render the radio as RadioCard"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the group and all its radios are disabled. Individual radios \ncan be disabled using their disabled prop."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the radio buttons are to be displayed inline horizontally."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Optional label text to display above the radio buttons."
      },
      "name": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the group, used to link radio buttons together in HTML. If omitted, a \nunique name will be generated internally."
      },
      "options": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of options to render in the group."
      },
      "selectedValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "Value of the selected radio. The child with this value will be :checked."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/SegmentedControl.js": {
    "description": "A SegmentedControl is a linear collection of buttons which allows a user to choose an option from multiple choices, \nsimilar to a Radio group. Compared to the ButtonGroup component, SegmentedControl has affordances to signify a \nselection UI and a reduced visual weight which is appropriate for forms.",
    "displayName": "SegmentedControl",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultValue": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Initial value. Mutually exclusive with value prop."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control group should take up the full width of its container."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control should appear as an inline element."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent to apply to the selected value."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this control should use large buttons."
      },
      "options": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "List of available options."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this control should use small buttons."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Selected value. Mutually exclusive with defaultValue prop."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/Switch.js": {
    "description": "Switch is a form control for toggling between boolean states. It is similar to Checkbox, \nbut presents a more skeuomorphic appearance that mimics a physical switch.",
    "displayName": "Switch",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "alignIndicator": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Alignment of the indicator within container."
      },
      "checked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is checked."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Label for the control."
      },
      "defaultChecked": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Label for the control."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control is non-interactive."
      },
      "inline": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the control should appear as an inline element."
      },
      "innerLabel": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display inside the switch indicator when unchecked."
      },
      "innerLabelChecked": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text to display inside the switch indicator when checked. \nIf innerLabel is provided and this prop is omitted, then \ninnerLabel will be used for both states."
      },
      "label": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Text label for the control."
      },
      "labelElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element label for the control."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether this control should use large styles."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of the HTML tag that wraps the checkbox. By default a \n<label> is used, which effectively enlarges the click target \nto include all of its children. Supply a different tag name if \nthis behavior is undesirable or you're listening to click \nevents from a parent element (as the label can register \nduplicate clicks)."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/slider/Handle.js": {
    "description": "Handles for a MultiSlider.",
    "displayName": "Handle",
    "methods": [],
    "props": {
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "intentAfter": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Intent for the track segment immediately after this handle, taking \npriority over intentBefore."
      },
      "intentBefore": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Intent for the track segment immediately before this handle."
      },
      "interactionKind": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'lock'",
              "computed": false
            },
            {
              "value": "'push'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "How this handle interacts with other handles."
      },
      "labelStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive labels. Must be greater than zero."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "trackStyleAfter": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Style to use for the track segment immediately after this handle, \ntaking priority over trackStyleBefore."
      },
      "trackStyleBefore": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Style to use for the track segment immediately before this handle"
      },
      "type": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'full'",
              "computed": false
            },
            {
              "value": "'start'",
              "computed": false
            },
            {
              "value": "'end'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "Handle appearance type."
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": true,
        "description": "Numeric value of this handle."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/slider/MultiSlider.js": {
    "description": "MultiSlider is a flexible solution for picking arbitrary values on a number line.",
    "displayName": "MultiSlider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultTrackIntent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Default intent of a track segment, used only if no handle specifies intentBefore/After."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the slider is non-interactive."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "handles": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "List of handles. This prop is updated everytime the value of a handle changes.\nIt can be used to retrive the current value of handles."
      },
      "labelPrecision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of decimal places to use when rendering label value. Default \nvalue is the number of decimals used in the stepSize prop. \nThis prop has no effect if you supply a custom labelRenderer callback."
      },
      "format": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This props is limitated with respect the react implementation. \nIt manage the formatting of the label, in the following way:\n- True/False controls the display of the label.\n- 'percentage': it displays the number in percentage format.\n- {'before': value, 'after': value}: it adds the value before and after\n  the label."
      },
      "labelStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive labels. Must be greater than zero."
      },
      "labelValues": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of specific values for the label placement. This prop is \nmutually exclusive with labelStepSize."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum value of the slider."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum value of the slider."
      },
      "n_changes": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to detected when the value\non the slider changes.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_releases": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_releases changed. This can be used to detected when the handle is\nreleases.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "showTrackFill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a solid bar should be rendered on the track between current and \ninitial values, or between handles for RangeSlider.."
      },
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive values; amount by which the handle\nmoves. Must be greater than zero."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the slider in a vertical orientation."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/slider/RangeSlider.js": {
    "description": "Use RangeSlider to choose a range between upper and lower bounds.",
    "displayName": "RangeSlider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the slider is non-interactive."
      },
      "initialValue": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Initial value of the slider. This determines the other end of the track \nfill: from initialValue to value."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "labelPrecision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of decimal places to use when rendering label value. Default \nvalue is the number of decimals used in the stepSize prop. \nThis prop has no effect if you supply a custom labelRenderer callback."
      },
      "format": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This props is limitated with respect the react implementation. \nIt manage the formatting of the label, in the following way:\n- True/False controls the display of the label.\n- 'percentage': it displays the number in percentage format.\n- {'before': value, 'after': value}: it adds the value before and after\n  the label."
      },
      "labelStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive labels. Must be greater than zero."
      },
      "labelValues": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of specific values for the label placement. This prop is \nmutually exclusive with labelStepSize."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum value of the slider."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum value of the slider."
      },
      "n_changes": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to detected when the value\non the slider changes.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_releases": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_releases changed. This can be used to detected when the handle is\nreleases.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "showTrackFill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a solid bar should be rendered on the track between current and \ninitial values, or between handles for RangeSlider."
      },
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive values; amount by which the handle moves. \nMust be greater than zero."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "value": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Value of slider."
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the slider in a vertical orientation."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-controls/slider/Slider.js": {
    "description": "A slider is a numeric input for choosing numbers between lower and upper bounds. It also has a \nlabeled axis that supports custom formatting.",
    "displayName": "Slider",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the slider is non-interactive."
      },
      "initialValue": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Initial value of the slider. This determines the other end of the track \nfill: from initialValue to value."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "labelPrecision": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Number of decimal places to use when rendering label value. Default \nvalue is the number of decimals used in the stepSize prop. \nThis prop has no effect if you supply a custom labelRenderer callback."
      },
      "format": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "bool"
            },
            {
              "name": "string"
            },
            {
              "name": "object"
            }
          ]
        },
        "required": false,
        "description": "This props is limitated with respect the react implementation. \nIt manages the formatting of the label, in the following way:\n- True/False controls the display of the label.\n- 'percentage': it displays the number in percentage format.\n- {'before': value, 'after': value}: it adds the value before and after\n  the label."
      },
      "labelStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive labels. Must be greater than zero."
      },
      "labelValues": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of specific values for the label placement. This prop is \nmutually exclusive with labelStepSize."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Maximum value of the slider."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Minimum value of the slider."
      },
      "n_changes": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_clicks changed. This can be used to detected when the value\non the slider changes.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "n_releases": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "An integer that represents the time (in ms since 1970)\nat which n_releases changed. This can be used to detected when the handle is\nreleases.",
        "defaultValue": {
          "value": "0",
          "computed": false
        }
      },
      "showTrackFill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a solid bar should be rendered on the track between current and \ninitial values, or between handles for RangeSlider."
      },
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Increment between successive values; amount by which the handle moves. \nMust be greater than zero."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "value": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Value of slider."
      },
      "vertical": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the slider in a vertical orientation."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-inputs/FileInput.js": {
    "description": "File input component.",
    "displayName": "FileInput",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "buttonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The button text."
      },
      "content": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Content of the file as base64 string."
      },
      "filename": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Filename of the file"
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the file input is non-interactive. Setting this to true \nwill automatically disable the child input too."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the file input should take up the full width of its container."
      },
      "hasSelection": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the user has made a selection in the input. This will affect \nthe component's text styling. Make sure to set a non-empty value for \nthe text prop as well."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the file input should appear with large styling."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the file input should appear with small styling."
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text to display."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-inputs/InputGroup.js": {
    "description": "Input groups are a basic building block used to render text inputs across many Blueprint components. \nThis component allows you to optionally add icons and buttons within a text input to expand its appearance \nand functionality. For example, you might use an input group to build a visibility toggle for a password field.",
    "displayName": "InputGroup",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "addOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, onAdd will be invoked when the input loses focus. Otherwise, onAdd \nis only invoked when enter is pressed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultValue": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "string"
            },
            {
              "name": "number"
            }
          ]
        },
        "required": false,
        "description": "In uncontrolled mode, this sets the default value of the input. Note that this value is \nonly used upon component instantiation and changes to this prop during the component \nlifecycle will be ignored."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input is non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "inputClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name to apply to the <input> element (not the InputGroup container)."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the input will display with larger styling. This is equivalent to setting \nClasses.LARGE via className on the parent control group and on the child input group."
      },
      "leftElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element to render on the left side of input. This prop is mutually exclusive with leftIcon."
      },
      "leftIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to render on the left side of the input group, before the user's cursor."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text in the absence of any value."
      },
      "round": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input (and any buttons) should appear with rounded caps."
      },
      "rightElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element to render on right side of input. For best results, use a minimal button, tag, or small spinner."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the file input should appear with small styling."
      },
      "type": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "HTML input type attribute."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input value that changes every time a new character is inserted."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input text updated when input loses blur or on 'Enter' key press."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-inputs/NumericInput.js": {
    "description": "The NumericInput component provides controls for easily inputting, incrementing, and decrementing numeric values.",
    "displayName": "NumericInput",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "addOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, onAdd will be invoked when the input loses focus. Otherwise, onAdd \nis only invoked when enter is pressed.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "allowNumericCharactersOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to allow only floating-point number characters in the field, \nmimicking the native input[type=\"number\"]."
      },
      "buttonPosition": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "'left'",
              "computed": false
            },
            {
              "value": "'right'",
              "computed": false
            }
          ]
        },
        "required": false,
        "description": "The position of the buttons with respect to the input field. Either 'left' or 'right'"
      },
      "clampValueOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the value should be clamped to [min, max] on blur. The value will be clamped \nto each bound only if the bound is defined. Note that native input[type=\"number\"] controls \ndo NOT clamp on blur."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "defaultValue": {
        "type": {
          "name": "enum",
          "value": [
            {
              "value": "PropTypes.string",
              "computed": true
            },
            {
              "value": "PropTypes.number",
              "computed": true
            }
          ]
        },
        "required": false,
        "description": "In uncontrolled mode, this sets the default value of the input. Note that this value is \nonly used upon component instantiation and changes to this prop during the component \nlifecycle will be ignored."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input is non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "inputClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Class name to apply to the <input> element (not the InputGroup container)."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the input will display with larger styling. This is equivalent to setting \nClasses.LARGE via className on the parent control group and on the child input group."
      },
      "leftElement": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Element to render on the left side of input. This prop is mutually exclusive with leftIcon."
      },
      "leftIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to render on the left side of the input group, before the user's cursor. This prop is mutually exclusive with leftElement."
      },
      "locale": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The locale name, which is passed to the component to format the number and allowing to type the number \nin the specific locale. See MDN documentation for more info about browser locale identification."
      },
      "majorStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The increment between successive values when shift is held. Pass explicit null value to disable this interaction."
      },
      "max": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The maximum value of the input. WARNING: This prop cannot be modified dynamically using callbacks."
      },
      "min": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The minimum value of the input. WARNING: This prop cannot be modified dynamically using callbacks."
      },
      "minorStepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The increment between successive values when alt is held. Pass explicit null value to disable this interaction."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text in the absence of any value."
      },
      "selectAllOnFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the entire text field should be selected on focus."
      },
      "selectAllOnIncrement": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the entire text field should be selected on increment."
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the file input should appear with small styling."
      },
      "stepSize": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The increment between successive values when no modifier keys are held."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input value that changes every time a new character is inserted."
      },
      "number": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input text updated when input loses blur or on 'Enter' key press."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-inputs/TagInput.js": {
    "description": "Tag inputs render Tags inside an input, followed by an actual text input. \nThe container is styled to look like a Blueprint input; the actual editable element appears \nafter the last tag. Clicking anywhere on the container will focus the text input.",
    "displayName": "TagInput",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "addOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, onAdd will be invoked when the input loses focus. Otherwise, \nonAdd is only invoked when enter is pressed."
      },
      "addOnPaste": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, onAdd will be invoked when the user pastes text containing the separator \ninto the input. Otherwise, pasted text will remain in the input.\n\n    Note: For example, if addOnPaste=true and separator=\"\\n\" (new line), then:\n      - Pasting \"hello\" will not invoke onAdd\n      - Pasting \"hello\\n\" will invoke onAdd with [\"hello\"]\n      - Pasting \"hello\\nworld\" will invoke onAdd with [\"hello\", \"world\"]"
      },
      "autoResize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should automatically resize as a user types in the text input. \nThis will have no effect when fill={true}."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Optional child elements which will be rendered between the selected tags and the text input. \nRendering children is usually unnecessary."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "tagIntents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "cycle tag intent",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input is non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the input will display with larger styling. This is equivalent to setting \nClasses.LARGE via className on the parent control group and on the child input group."
      },
      "leftIcon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to render on the left side of the input group, before the user's cursor."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text in the absence of any value."
      },
      "separator": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to split input text into multiple values. Default value \nsplits on commas and newlines. Explicit false value disables splitting"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagAdded": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Value updated when a new tag is added. Object with value and index of the tag"
      },
      "tagRemoved": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Value updated when a tag is removed. Object with value and index of the tag",
        "defaultValue": {
          "value": "{}",
          "computed": false
        }
      },
      "tagLarge": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply large style to tags",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "tagMinimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply minimal style to tags",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "values": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Controlled tag values. Each value will be rendered inside a Tag.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/form-inputs/TextArea.js": {
    "description": "Use the <TextArea> React component, which can be controlled similar to an <InputGroup> element.",
    "displayName": "TextArea",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "addOnBlur": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, onAdd will be invoked when the input loses focus. Otherwise, onAdd \nis only invoked when enter is pressed."
      },
      "autoResize": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should automatically resize vertically as a user types in the text input. \nThis will disable manual resizing in the vertical dimension."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input is non-interactive."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "large": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the input will display with larger styling. This is equivalent to setting \nClasses.LARGE via className on the parent control group and on the child input group."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Placeholder text when there is no value."
      },
      "readOnly": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Disable the user interaction without applying the disabled style"
      },
      "small": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the file input should appear with small styling."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "value": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input value that changes every time a new character is inserted."
      },
      "text": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input text updated when input loses blur or on 'Enter' key press."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/Alert.js": {
    "description": "Alerts notify users of important information and force them to acknowledge the alert content before continuing.",
    "displayName": "Alert",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "cancelButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text for the cancel button. If this prop is defined, then either \nonCancel or onClose must also be defined."
      },
      "canEscapeKeyCancel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing escape when focused on the Alert should cancel the alert. If \nthis prop is enabled, then either onCancel or onClose must also be defined."
      },
      "canOutsideClickCancel": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether clicking outside the Alert should cancel the alert. If this prop is enabled, \nthen either onCancel or onClose must also be defined."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Dialog contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "confirmButtonText": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The text for the confirm (right-most) button. This button will always appear, \nand uses the value of the intent prop below."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to display on the left side."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component should take up the full width of its container."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The intent to be applied to the confirm (right-most) button and the icon (if provided)."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles the visibility of the alert.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "loading": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If set to true, the confirm button will be set to its loading state. The cancel button, \nif visible, will be disabled."
      },
      "isCanceled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Value set when the user cancel the alert"
      },
      "isConfirmed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Value set when the user confirm the alert"
      },
      "isClosed": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Value set when the user either confirm or cancel the alert"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/ContextMenu.js": {
    "description": "Context menus present the user with a list of actions when right-clicking on a target element.",
    "displayName": "ContextMenu",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The context menu target. This may optionally be a render function so you can use component state to render the target."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content that will be displayed inside of the tooltip."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the context menu is disabled."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the content is open."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/Drawer.js": {
    "description": "Drawers overlay content over existing parts of the UI and are anchored to the edge of the screen.",
    "displayName": "Drawer",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should acquire application focus when it first opens."
      },
      "backdropClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class names to apply to backdrop element."
      },
      "canEscapeKeyClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should invoke onClose."
      },
      "canOutsideClickClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether clicking outside the overlay element (either on backdrop when present or on document) \nshould invoke onClose."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Drawer contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts to \nfocus an element outside the overlay and this prop is enabled, then the overlay will immediately \nbring focus back to itself. If you are nesting overlay components, either disable this prop on the \n\"outermost\" overlays or mark the nested ones usePortal={false}."
      },
      "hasBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a container-spanning backdrop element should be rendered behind the contents. When false, users \nwill be able to scroll through and interact with overlaid content."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to display on the left side."
      },
      "isCloseButtonShown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the close button in the dialog's header. Note that the header will only be \nrendered if title is provided."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles the visibility of the alert.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "lazy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and usePortal={true}, the Portal containing the children is created and attached to the \nDOM when the overlay is opened for the first time; otherwise this happens when the component mounts. \nLazy mounting provides noticeable performance improvements if you have lots of overlays at once, \nsuch as on each row of a table."
      },
      "portalClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the Portal element if usePortal={true}."
      },
      "portalContainer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The container element into which the overlay renders its contents, when usePortal is true. This prop is \nignored if usePortal is false."
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Position of a drawer. All angled positions will be casted into pure positions (TOP, BOTTOM, LEFT or RIGHT)."
      },
      "shouldReturnFocusOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the application should return focus to the last active element in the document after this overlay \ncloses."
      },
      "size": {
        "type": {
          "name": "union",
          "value": [
            {
              "name": "number"
            },
            {
              "name": "enum",
              "value": [
                {
                  "value": "'small'",
                  "computed": false
                },
                {
                  "value": "'standard'",
                  "computed": false
                },
                {
                  "value": "'large'",
                  "computed": false
                }
              ]
            }
          ]
        },
        "required": false,
        "description": "CSS size of the drawer. This sets width if horizontal position (default) and height otherwise.\nConstants are available for common sizes:\n  DrawerSize.SMALL = 360px\n  DrawerSize.STANDARD = 50%\n  DrawerSize.LARGE = 90%"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the dialog."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Title of the dialog. If provided, an element with Classes.DIALOG_HEADER will be rendered inside the dialog before \nany children elements."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes. This is used by React CSSTransition \nto know when a transition completes and must match the duration of the animation in CSS. Only set this prop if you \noverride Blueprint's default transitions with new transitions of a different length."
      },
      "transitionName": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Name of the transition for internal CSSTransition. Providing your own name here will require defining new CSS transition properties."
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should be wrapped in a Portal, which renders its contents in a new element attached to portalContainer prop. \nThis prop essentially determines which element is covered by the backdrop: if false, then only its parent is covered; otherwise, the entire page is \ncovered (because the parent of the Portal is the <body> itself).\nSet this prop to false on nested overlays (such as Drawer or Popover) to ensure that they are rendered above their parents."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/Popover.js": {
    "description": "Popovers display floating content next to a target element.",
    "displayName": "Popover",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover/tooltip should acquire application focus when it first opens."
      },
      "boundary": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class names to apply to backdrop element. One of \"scrollParent\" \"body\" \"clippingParents\"."
      },
      "canEscapeKeyClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should invoke onClose."
      },
      "captureDismiss": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When enabled, clicks inside a Classes.POPOVER_DISMISS element will only close the current popover and not outer \npopovers. When disabled, the current popover and any ancestor popovers will be closed. \nSee: http://blueprintjs.com/docs/#core/components/popover.closing-on-click"
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Interactive element which will trigger the popover."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content displayed inside the popover."
      },
      "defaultIsOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Initial opened state when uncontrolled."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prevents the popover from appearing when true."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts to focus an element outside \nthe overlay and this prop is enabled, then the overlay will immediately bring focus back to itself. If you are nesting \noverlay components, either disable this prop on the \"outermost\" overlays or mark the nested ones usePortal={false}."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the wrapper and target should take up the full width of their container. Note that supplying true for this \nprop will force targetTagName=\"div\"."
      },
      "hasBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enables an invisible overlay beneath the popover that captures clicks and prevents interaction with the rest of the document \nuntil the popover is closed. This prop is only available when interactionKind is PopoverInteractionKind.CLICK. \nWhen popovers with backdrop are opened, they become focused."
      },
      "hoverCloseDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The amount of time in milliseconds the popover should remain open after the user hovers off the trigger. The timer is \ncanceled if the user mouses over the target before it expires."
      },
      "hoverOpenDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The amount of time in milliseconds the popover should wait before opening after the user hovers over the trigger. \nThe timer is canceled if the user mouses away from the target before it expires"
      },
      "inheritDarkTheme": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a popover that uses a Portal should automatically inherit the dark theme from its parent."
      },
      "interactionKind": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The kind of interaction that triggers the display of the popover. Either \"click\", \"click-target\" or \"hover-target\","
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover is visible. Passing this prop puts the popover in controlled mode, where the only way to change \nvisibility is by updating this property. If disabled={true}, this prop will be ignored, and the popover will remain closed..",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "lazy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and usePortal={true}, the Portal containing the children is created and attached to the DOM when the overlay is opened \nfor the first time; otherwise this happens when the component mounts. Lazy mounting provides noticeable performance improvements \nif you have lots of overlays at once, such as on each row of a table."
      },
      "matchTargetWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover content should be sized to match the width of the target. This is sometimes useful for dropdown menus. \nThis prop is implemented using a Popper.js custom modifier."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to apply minimal styling to this popover or tooltip. Minimal popovers do not have an arrow pointing to their target and use\na subtler animation."
      },
      "openOnTargetFocus": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Whether the popover should open when its target is focused. If true, target will render with tabindex=\"0\" to make it focusable via keyboard navigation.\nNote that this functionality is only enabled for hover interaction popovers/tooltips."
      },
      "placement": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The placement (relative to the target) at which the popover should appear. Mutually exclusive with position prop. Prefer using this over position, \nas it more closely aligns with Popper.js semantics. The default value of \"auto\" will choose the best placement when opened and will allow the \npopover to reposition itself to remain onscreen as the user scrolls around."
      },
      "popoverClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited string of class names applied to the popover element."
      },
      "popupKind": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The kind of popup displayed by the popover. This property is ignored if interactionKind is Popover2InteractionKind is HOVER_TARGET_ONLY. \nThis controls the aria-haspopup attribute of the target element. The default is \"menu\" (technically, aria-haspopup will be set to \"true\", \nwhich is the same as \"menu\", for backwards compatibility)."
      },
      "portalClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the Portal element if usePortal={true}."
      },
      "portalContainer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The container element into which the overlay renders its contents, when usePortal is true. This prop is \nignored if usePortal is false."
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The position (relative to the target) at which the popover should appear. Mutually exclusive with placement prop. The default value of \"auto\" will \nchoose the best position when opened and will allow the popover to reposition itself to remain onscreen as the user scrolls around."
      },
      "positioningStrategy": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Popper.js positioning strategy. See: https://popper.js.org/docs/v2/constructors/#strategy"
      },
      "shouldReturnFocusOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the application should return focus to the last active element in the document after this popover closes. This is automatically set to false if \nthis is a hover interaction popover. If you are attaching a popover and a tooltip to the same target, you must take care to either disable this prop for \nthe popover or disable the tooltip's openOnTargetFocus prop."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes. This is used by React CSSTransition to know when a transition completes \nand must match the duration of the animation in CSS. Only set this prop if you override Blueprint's default transitions with new transitions of a different length."
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover should be rendered inside a Portal attached to portalContainer prop.\nRendering content inside a Portal allows the popover content to escape the physical bounds of its parent while still being positioned correctly relative to its target. \nUsing a Portal is necessary if any ancestor of the target hides overflow or uses very complex positioning.\nNot using a Portal can result in smoother performance when scrolling and allows the popover content to inherit CSS styles from surrounding elements, \nbut it remains subject to the overflow bounds of its ancestors."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/Tooltip.js": {
    "description": "A tooltip is a lightweight popover for showing additional information during hover interactions.",
    "displayName": "Tooltip",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Interactive element which will trigger the tooltip."
      },
      "canEscapeKeyClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should invoke onClose."
      },
      "captureDismiss": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "When enabled, clicks inside a Classes.POPOVER_DISMISS element will only close the current popover and not outer popovers. \nWhen disabled, the current popover and any ancestor popovers will be close"
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "compact": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to use a compact appearance, which reduces the visual padding around tooltip content."
      },
      "content": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The content that will be displayed inside of the tooltip."
      },
      "defaultIsOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Initial opened state when uncontrolled."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Prevents the popover from appearing when true."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts to focus an element outside the \noverlay and this prop is enabled, then the overlay will immediately bring focus back to itself"
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the wrapper and target should take up the full width of their container. Note that supplying true for this prop will force targetTagName=\"div\"."
      },
      "hoverCloseDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The amount of time in milliseconds the tooltip should remain open after the user hovers off the trigger. \nThe timer is canceled if the user mouses over the target before it expires."
      },
      "hoverOpenDelay": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "The amount of time in milliseconds the tooltip should wait before opening after the user hovers over the trigger. \nThe timer is canceled if the user mouses away from the target before it expires."
      },
      "inheritDarkTheme": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a popover that uses a Portal should automatically inherit the dark theme from its parent."
      },
      "intent": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "interactionKind": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The kind of interaction that triggers the display of the popover. Either \"click\", \"click-target\" or \"hover-target\","
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover is visible. Passing this prop puts the popover in controlled mode, where the only way to change visibility \nis by updating this property. If disabled={true}, this prop will be ignored, and the popover will remain closed."
      },
      "matchTargetWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover content should be sized to match the width of the target. This is sometimes useful for dropdown menus. \nThis prop is implemented using a Popper.js custom modifier."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to apply minimal styling to this popover or tooltip. Minimal popovers do not have an arrow pointing to their \ntarget and use a subtler animation."
      },
      "openOnTargetFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover should open when its target is focused. If true, target will render with tabindex=\"0\" to make it focusable via keyboard navigation. \nNote that this functionality is only enabled for hover interaction popovers/tooltips."
      },
      "placement": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The placement (relative to the target) at which the popover should appear. Mutually exclusive with position prop. Prefer using this over \nposition, as it more closely aligns with Popper.js semantics. The default value of \"auto\" will choose the best placement when opened \nand will allow the popover to reposition itself to remain onscreen as the user scrolls around."
      },
      "popoverClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited string of class names applied to the popover element."
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The position (relative to the target) at which the popover should appear. Mutually exclusive with placement prop. The default value of \n\"auto\" will choose the best position when opened and will allow the popover to reposition itself to remain onscreen as the user scrolls \naround."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates how long (in milliseconds) the tooltip's appear/disappear transition takes. This is used by React CSSTransition \nto know when a transition completes and must match the duration of the animation in CSS. Only set this prop if you override \nBlueprint's default transitions with new transitions of a different length."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/dialogs/Dialog.js": {
    "description": "Dialogs present content overlaid over other parts of the UI.",
    "displayName": "Dialog",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should acquire application focus when it first opens."
      },
      "backdropClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class names to apply to backdrop element."
      },
      "canEscapeKeyClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should invoke onClose."
      },
      "canOutsideClickClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether clicking outside the overlay element (either on backdrop when present or on document) \nshould invoke onClose."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Dialog contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts to \nfocus an element outside the overlay and this prop is enabled, then the overlay will immediately \nbring focus back to itself. If you are nesting overlay components, either disable this prop on the \n\"outermost\" overlays or mark the nested ones usePortal={false}."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to display on the left side."
      },
      "isCloseButtonShown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the close button in the dialog's header. Note that the header will only be \nrendered if title is provided."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles the visibility of the alert.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "lazy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and usePortal={true}, the Portal containing the children is created and attached to the \nDOM when the overlay is opened for the first time; otherwise this happens when the component mounts. \nLazy mounting provides noticeable performance improvements if you have lots of overlays at once, \nsuch as on each row of a table."
      },
      "portalClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the Portal element if usePortal={true}."
      },
      "portalContainer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The container element into which the overlay renders its contents, when usePortal is true. This prop is \nignored if usePortal is false."
      },
      "shouldReturnFocusOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the application should return focus to the last active element in the document after this overlay \ncloses."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the dialog."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Title of the dialog. If provided, an element with Classes.DIALOG_HEADER will be rendered inside the dialog before \nany children elements."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes. This is used by React CSSTransition \nto know when a transition completes and must match the duration of the animation in CSS. Only set this prop if you \noverride Blueprint's default transitions with new transitions of a different length."
      },
      "transitionName": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Name of the transition for internal CSSTransition. Providing your own name here will require defining new CSS transition properties."
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should be wrapped in a Portal, which renders its contents in a new element attached to portalContainer prop. \nThis prop essentially determines which element is covered by the backdrop: if false, then only its parent is covered; otherwise, the entire page is \ncovered (because the parent of the Portal is the <body> itself).\nSet this prop to false on nested overlays (such as Dialog or Popover) to ensure that they are rendered above their parents."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/dialogs/DialogBody.js": {
    "description": "Body of the dialog, optionally with a constrained container height which allows vertical scrolling of its content.",
    "displayName": "DialogBody",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "DialogBody contents."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "useOverflowScrollContainer": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Enable scrolling for the container"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/dialogs/DialogFooter.js": {
    "description": "Footer of the dialog. Footer \"actions\" are rendered towards the right side of the footer container element.",
    "displayName": "DialogFooter",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "actions": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Dialog actions (typically buttons) are rendered on the right side of the footer."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Child contents are rendered on the left side of the footer."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Use a \"minimal\" appearance for the footer, simply applying an HTML role and some visual padding. This is useful for small dialogs, \nand should not be used with <DialogBody useOverflowScrollContainer>.\nNote that this is the default behavior when using the CSS API, since that's how the -dialog-footer class was first introduced, \nso these styles are applied without a \"modifier\" class.\nWhen using the JS component API, minimal is false by default.\nShow the footer close from the content. Do not use with scroll body Use for small dialogs (confirm)"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/dialogs/DialogStep.js": {
    "description": "Step of a MultistepDialog component",
    "displayName": "DialogStep",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "panel": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Panel content, rendered by the parent MultistepDialog when this step is active."
      },
      "portalClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the Portal element if usePortal={true}."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Title of the dialog. If provided, an element with Classes.DIALOG_HEADER will be rendered inside the dialog before \nany children elements."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/dialogs/MultistepDialog.js": {
    "description": "MultistepDialog is a wrapper around Dialog that displays a dialog with multiple steps.\nEach step has a corresponding panel.",
    "displayName": "MultistepDialog",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should acquire application focus when it first opens."
      },
      "backdropClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "CSS class names to apply to backdrop element."
      },
      "canEscapeKeyClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should invoke onClose."
      },
      "canOutsideClickClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether clicking outside the overlay element (either on backdrop when present or on document) \nshould invoke onClose."
      },
      "children": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Dialog steps."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "enforceFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should prevent focus from leaving itself. That is, if the user attempts to \nfocus an element outside the overlay and this prop is enabled, then the overlay will immediately \nbring focus back to itself. If you are nesting overlay components, either disable this prop on the \n\"outermost\" overlays or mark the nested ones usePortal={false}."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to display on the left side."
      },
      "initialStepIndex": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "A 0 indexed initial step to start off on, to start in the middle of the dialog, for example. \nIf the provided index exceeds the number of steps, it defaults to the last step. If a negative \nindex is provided, it defaults to the first step."
      },
      "isCloseButtonShown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the close button in the dialog's header. Note that the header will only be \nrendered if title is provided."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles the visibility of the alert.",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "currentStepId": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Current step ID"
      },
      "lazy": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true and usePortal={true}, the Portal containing the children is created and attached to the \nDOM when the overlay is opened for the first time; otherwise this happens when the component mounts. \nLazy mounting provides noticeable performance improvements if you have lots of overlays at once, \nsuch as on each row of a table."
      },
      "navigationPosition": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Position of the step navigation within the dialog."
      },
      "portalClassName": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Space-delimited string of class names applied to the Portal element if usePortal={true}."
      },
      "portalContainer": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "The container element into which the overlay renders its contents, when usePortal is true. This prop is \nignored if usePortal is false."
      },
      "resetOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to reset the dialog state to its initial state on close. By default, closing the dialog will reset its state."
      },
      "shouldReturnFocusOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the application should return focus to the last active element in the document after this overlay \ncloses."
      },
      "showCloseButtonInFooter": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the footer close button is shown. When this value is true, the button will appear regardless of the value of \nisCloseButtonShown."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS styles to apply to the dialog."
      },
      "title": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Title of the dialog. If provided, an element with Classes.DIALOG_HEADER will be rendered inside the dialog before \nany children elements."
      },
      "transitionDuration": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Indicates how long (in milliseconds) the overlay's enter/leave transition takes. This is used by React CSSTransition \nto know when a transition completes and must match the duration of the animation in CSS. Only set this prop if you \noverride Blueprint's default transitions with new transitions of a different length."
      },
      "transitionName": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Name of the transition for internal CSSTransition. Providing your own name here will require defining new CSS transition properties."
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the overlay should be wrapped in a Portal, which renders its contents in a new element attached to portalContainer prop. \nThis prop essentially determines which element is covered by the backdrop: if false, then only its parent is covered; otherwise, the entire page is \ncovered (because the parent of the Portal is the <body> itself).\nSet this prop to false on nested overlays (such as MultistepDialog or Popover) to ensure that they are rendered above their parents."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/toast/OverlayToaster.js": {
    "description": "The OverlayToaster component (previously named Toaster) is a stateful container for a single list of toasts.",
    "displayName": "OverlayToaster",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "autoFocus": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a toast should acquire application focus when it first opens. This is disabled by default so \nthat toasts do not interrupt the user's flow. Note that enforceFocus is always disabled for Toasters."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "canEscapeKeyClear": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether pressing the esc key should clear all active toasts."
      },
      "toasts": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "The maximum number of active toasts that can be displayed at once. When the limit is\n about to be exceeded, the oldest active toast is removed.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "maxToasts": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Toasts to be displayed"
      },
      "position": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Position of Toaster within its container."
      },
      "usePortal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the toaster should be rendered into a new element attached to document.body. If false, \nthen positioning will be relative to the parent element."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/overlays/toast/Toast.js": {
    "description": "A toast is a lightweight, ephemeral notice from an application in direct response to a user's action.",
    "displayName": "Toast",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "icon": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Name of a Blueprint UI icon to display on the left side."
      },
      "intent": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Visual intent color to apply to element."
      },
      "isCloseButtonShown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the close button in the dialog's header. Note that the header will only be \nrendered if title is provided."
      },
      "message": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "Message to display in the body of the toast."
      },
      "timeout": {
        "type": {
          "name": "number"
        },
        "required": false,
        "description": "Milliseconds to wait before automatically dismissing toast. Providing a value less than or equal \nto 0 will disable the timeout (this is discouraged)."
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/select/MultiSelect.js": {
    "description": "MultiSelect renders a UI to choose multiple items from a list. It renders a TagInput wrapped in a Popover",
    "displayName": "MultiSelect",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component is non-interactive. If true, the list's item renderer will not be called. Note that you'll \nalso need to disable the component's children, if appropriate."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the wrapper and target should take up the full width of their container. Note that supplying true for this \nprop will force targetTagName=\"div\"."
      },
      "initialContent": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "React content to render when query is empty. If omitted, all items will be rendered (or result of itemListPredicate with empty query). \nIf explicit null, nothing will be rendered when query is empty."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of items in the list.",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "matchTargetWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the popover width equal to the target width."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply minimal style to popover."
      },
      "openOnKeyDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the component waits until a keydown event in the TagInput before opening its popover. If false, the popover opens immediately \nafter a mouse click focuses the component's TagInput."
      },
      "placeholder": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "Input placeholder text. Shorthand for tagInputProps.placeholder."
      },
      "resetOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item when the popover closes. The query will also be reset to the empty string."
      },
      "resetOnQuery": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item every time the query changes (via prop or by user input).",
        "defaultValue": {
          "value": "false",
          "computed": false
        }
      },
      "resetOnSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item when an item is selected. The query will also be reset to the empty string."
      },
      "selectedItems": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Selected items",
        "defaultValue": {
          "value": "[]",
          "computed": false
        }
      },
      "showClearButton": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether to show the clear button on Input"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "tagRemoved": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Value updated when a tag is removed. Object with value and index of the tag"
      },
      "tagLarge": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply large style to tags"
      },
      "tagMinimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply minimal style to tags"
      },
      "tagIntents": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "cycle tags intents"
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/select/Omnibar.js": {
    "description": "Omnibar is a macOS Spotlight-style typeahead component composing Overlay and QueryList",
    "displayName": "Omnibar",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "overlayHasBackdrop": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether a container-spanning backdrop element should be rendered\nbehind the contents."
      },
      "initialContent": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "React content to render when query is empty. If omitted, all items will be rendered (or result of itemListPredicate with empty query). \nIf explicit null, nothing will be rendered when query is empty."
      },
      "isOpen": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Toggles the visibility of the omnibar."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of items in the list."
      },
      "matchTargetWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the popover width equal to the target width."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply minimal style to popover."
      },
      "selectedItem": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Selected item"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "resetOnQuery": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item every time the query changes (via prop or by user input)."
      },
      "resetOnSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item when an item is selected. The query will also be reset to the empty string."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/select/Select.js": {
    "description": "The Select component renders a UI to choose one item from a list.",
    "displayName": "Select",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the component is non-interactive. If true, the list's item renderer will not be called. Note that you'll \nalso need to disable the component's children, if appropriate."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the wrapper and target should take up the full width of their container. Note that supplying true for this \nprop will force targetTagName=\"div\"."
      },
      "filterable": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the dropdown list can be filtered."
      },
      "initialContent": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "React content to render when query is empty. If omitted, all items will be rendered (or result of itemListPredicate with empty query). \nIf explicit null, nothing will be rendered when query is empty."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of items in the list."
      },
      "matchTargetWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the popover width equal to the target width."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply minimal style to popover."
      },
      "selectedItem": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Selected item"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "resetOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item when the popover closes. The query will also be reset to the empty string."
      },
      "resetOnQuery": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item every time the query changes (via prop or by user input)."
      },
      "resetOnSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item when an item is selected. The query will also be reset to the empty string."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  },
  "src/lib/components/select/Suggest.js": {
    "description": "Suggest behaves similarly to Select, except it renders a text input as the Popover target \ninstead of arbitrary children.",
    "displayName": "Suggest",
    "methods": [],
    "props": {
      "id": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "The ID used to identify this component in Dash callbacks."
      },
      "className": {
        "type": {
          "name": "string"
        },
        "required": false,
        "description": "A space-delimited list of class names to pass along to a child element."
      },
      "closeOnSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the popover should close after selecting an item."
      },
      "disabled": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the input field should be disabled."
      },
      "fill": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the wrapper and target should take up the full width of their container. Note that supplying true for this \nprop will force targetTagName=\"div\"."
      },
      "initialContent": {
        "type": {
          "name": "node"
        },
        "required": false,
        "description": "React content to render when query is empty. If omitted, all items will be rendered (or result of itemListPredicate with empty query). \nIf explicit null, nothing will be rendered when query is empty."
      },
      "items": {
        "type": {
          "name": "array"
        },
        "required": false,
        "description": "Array of items in the list."
      },
      "matchTargetWidth": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Set the popover width equal to the target width."
      },
      "minimal": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Apply minimal style to popover."
      },
      "openOnKeyDown": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "If true, the component waits until a keydown event in the TagInput before opening its popover. If false, the popover opens immediately \nafter a mouse click or TAB key interaction focuses the component's TagInput."
      },
      "selectedItem": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "Selected item"
      },
      "style": {
        "type": {
          "name": "object"
        },
        "required": false,
        "description": "CSS properties to apply to the root element."
      },
      "resetOnClose": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item when the popover closes. The query will also be reset to the empty string."
      },
      "resetOnQuery": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item every time the query changes (via prop or by user input)."
      },
      "resetOnSelect": {
        "type": {
          "name": "bool"
        },
        "required": false,
        "description": "Whether the active item should be reset to the first matching item when an item is selected. The query will also be reset to the empty string."
      },
      "setProps": {
        "type": {
          "name": "func"
        },
        "required": false,
        "description": "Dash-assigned callback that gets fired when the value changes."
      }
    }
  }
}